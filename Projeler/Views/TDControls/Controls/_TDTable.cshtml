@using TDLibrary

<h1>tdTable by Sina SALIK</h1>
( <a href="downloads/tdTable.zip?v=1.1">İndir</a> )
                <br />
<h3>Notlar</h3>
Tablo oluşturulacak div'e aşağıdaki şekilde eklenir.
                <pre style="width: 750px;">
    $("#tablo").tdTable(
    {
        rootfolder: "@AppMgr.MainPath/js/tdControls/tdTable",
        title: "Kullanıcılar",
        listmethod: "@AppMgr.MainPath/Ajax/UsersTable",
        itemperpage: 5,
        tablewidth: 550,
        enablesorting: true,
        showfooter: true,
        showcommands: true,
        theme: "blue",
        conditions: {
            OrderBy: "ID",
            Fields: {
                ID: {
                    Title: "ID",
                    CssClass: "first"
                },
                Username: {
                    Title: "Kullanıcı Adı",
                    CssClass: "second"
                },
                Active: {
                    Title: "Aktif",
                    CssClass: "fourth"
                }
            }
        },
        commands: {
            AddText: "Kayıt Ekle",
            AddLink: "Kullanici/Ekle",
            DetailLink: "Kullanici/Detay/{ID}",
            UpdateLink: "Kullanici/Duzenle/{ID}"
        }
    });
                </pre>
<div id="tablo">
</div>
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />
<br />

<b>Kullanım :</b>
<br />
<br />
Aşağıda conditions özelliğine ait alt özelliklerin serialize edilen sınıfın özelliği olarak karşılıkları olması gerekir (JavaScriptSerializer için mesela).
                <br />
Bu özelliklerin isimleri ve tipleri yanlarına [Özellik İsmi, Özellik Türü] şeklinde tanımlanmıştır.
                <br />
Burada Fields özelliğini dönen veri List&lt;ClassAdı&gt; şeklinde değişken olacağından C#'ta dynamic türde yapmak en mantıklısı.
                <br />
Bunun yanında bu yapıyı kullanabilmek için indirdiğiniz zip dosyanın içerisinde bulunan TDConditions.dll ve NewtonSoft.Json.dll isimli kütüphaneleri projenize ilave edebilirsiniz. Bu şekilde yukarıda anlatılanları TDConditions.dll ile hazır yapılmış TDConditions sınıfı üzerinden kullanabilirsiniz.
                <br />
<br />
Aşağıda bütün özelliklere ait varsayılan değerler ve ne şekilde kullanıldıkları belirtilmiştir.
                <br />
<br />
<pre>
   $("#dataTable").tdTable(
   {
       listmethod: "",
       deletemethod: "",
       datatype: "",
       title: "Tablo Adı",
       showtitle: true,
       showheader: true,
       showfooter: true,
       showcommands: true,
       showsearchfield: true,
       showpager: true,
       enablesorting: true,
       itemperpage: 10,
       tablewidth: "",
       cssclass: "",
       theme: "red",
       paramname: "conditions",
       conditions: {
           SearchText: "",
           OrderBy: "",
           OrderDirection: "Asc",
           Top: 0,
           Fields: {
               ColumnName: {
                   Title: "",
                   Width: "",
                   CssClass: "",
                   Show: true, 
                   ActiveText: "&lt;div class=true&gt;&lt;/div&gt;",
                   PassiveText: "&lt;div class=false&gt;&lt;/div&gt;"
               }
           },
       },
       commands: {   
           DetailText: "Detay",
           DetailLink: "javascript:;",
           ShowDetailLink: true,
           
           AddText: "Ekle",
           AddLink: "javascript:;",
           ShowAddLink: true,
           
           UpdateText: "Düzenle",
           UpdateLink: "javascript:;",
           ShowUpdateLink: true,
           
           DeleteText: "Sil",
           DeleteLink: "javascript:;",
           ShowDeleteLink: true
       }
   });
                </pre>
<b>listmethod:</b> Tabloya veri döndüren methodun linki yazılır. List&lt;SınıfAdı&gt; şeklinde jenerik sınıf listesi şeklinde veri dönmelidir.
                <br />
<br />
<b>deletemethod:</b> İlgili satıra ait verinin silinmesi için çalışacak method linki yazılır. Method boolean olarak Json sonuç dönmelidir.
                <br />
<br />
<b>datatype:</b> Dönen verinin tipi (Sınıf ismi) yazılır.
                <br />
<br />
<b>title:</b> Tablo başlığı yazılır.
                <br />
<br />
<b>showtitle:</b> Tablo başlığının gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>showheader:</b> Tablonun üstünde alanların olduğu kısmın gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>showfooter:</b> Tablonun altında komutların olduğu kısmın gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>showcommands:</b> Tablonun altı kısmı gösterilmesi durumunda işlemler kısmının (Detay, Ekle, Düzenle, Sil gibi komut bölümlerinin) gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>showsearchfield:</b> Tablonun altı kısmı gösterilmesi durumunda arama kutusunun gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>showpager:</b> Tablonun altı kısmı gösterilmesi durumunda sayfalama kısmının gösterilip gösterilmeme seçeneği.
                <br />
<br />
<b>enablesorting:</b> Tablo üst kısmında alanlara tıklandığında sıralamada değişikliğe izin verilip verilmeme seçeneği.
                <br />
<br />
<b>itemperpage:</b> Tabloda sayfalama yapılacaksa sayfa başı eleman sayısı yazılır.
                <br />
<br />
<b>tablewidth:</b> Tablonun genişliği belirtilir. Belirtilmezse css'ten alır.
                <br />
<br />
<b>cssclass:</b> Tabloya özel css sınıfı eklenebilir. Aralarında boşluk bırakarak birden fazla sınıf eklenebilir. (Örn: "sınıf1 sınıf2" şeklinde.)
                <br />
<br />
<b>theme:</b> Tabloya hazırlanmış temayı ekler. Varsayılanı red yani kırmızıdır. Hazırda red, blue ve purple vardır ve Css dosyası üzerinden yeni temaları siz de ekleyebilirsiniz.
                <br />
<br />
<b>paramname:</b> listmethod'a gönderilen serialize edilecek parametrenin ismidir. Varsayılanı "conditions" olarak belirlenmiştir. Siz C# tarafında farklı bir parametre ismi kullanıyorsanız onun ismini belirtmelisiniz.
                <br />
<br />
<b>conditions:</b> Listelenecek verilerin belli başlı şartlarını tutan özelliktir. C# tarafında listmethod'a gönderilen "conditions" parametresi deserialize edilirken bu nesneye ait aşağıdaki isimlerdeki özelliklere sahip bir sınıf türünde nesneye deserialize edilmelidir. Bu sayede C# tarafında bu verilerle filtrelemelerinizi yapabilirsiniz. Bu özelliklerin kontrolünü C# tarafında siz yapacağınız için verdiğiniz değerleri kontrol etmediğiniz sürece hiçbir anlam ifade etmeyecektir. Bu özellikler SearchText, OrderBy, OrderDirection, Top ve Fields isminde alt özellikleridir. Bunun yanında TDConditions.dll isimli dosyayı projenize eklediyseniz conditions ismindeki string parametreyi içerisinde bulunan TDConditions isimli sınıfa deserialize ederseniz bu özelliklere o sınıf üzerinden ulaşabilirsiniz. Aşağıda bu özelliklerin ne işe yaradığı açıklanmakta;
                <br />
<b>SearchText:</b> Tablo üzerinde aranacak kelime atanır. Varsayılanı boştur. C# Özelliği -> [SearchText, string]
                <br />
<b>OrderBy:</b> Tablo hangi alan adına göre sıralanacaksa o belirtilir. C# Özelliği -> [OrderBy, string]
                <br />
<b>OrderDirection:</b> Tablo hangi yönde sıralanacaksa o belirtilir. C# Özelliği -> [OrderDirection, string]
                <br />
<b>Top:</b> Select cümlesindeki top özelliği veya mysql deki limit özelliği. Varsayılanı 0'dır. Belli sayıda veri listelenmek isterse o gönderilir. C# Özelliği -> [Top, int]
                <br />
<b>Fields:</b> Buraya listmethod ile dönen nesnelere ait özellik isimleri yazılır ve yazılan özellikler (kolonlar) tabloda gösterilir. C# Özelliği -> [Fields, dynamic] 
                <br />
Burada yazılan özellikler yukarıdaki örnekteki gibi tanımlanır ve yine tanımlanırken Title, Width, CssClass, Show, ActiveText ve PassiveText isimlerinde 6 farklı özellik ile tablodaki görüntüsünün nasıl olacağına karar verilir. Aşağıda bu özelliklerin açıklamaları mevcuttur. Örnek olarak dönen verilerden ID, Username ve Active özellikleri (kolonları) tabloda gösterilmiştir;
                <br />
ID: { 
                <br />
<b>Title:</b> Tabloda gösterilen alanın başlığı belirtilir.
                <br />
<b>Width:</b> Tabloda gösterilen alanın genişliği belirtilir. Belirtilmezse css dosyasından alır.
                <br />
<b>CssClass:</b> İlgili alana ve headerına belirtilen css sınıfını ekler. Boşsa eklemez. Standart olarak sırasıyla ilk dört kolon için first, second, third ve fourth eklenir. Hazır olarak responsive tanımlanmıştır. Özel sınıfta tanımlayabilirsiniz.
                <br />
<b>Show:</b> İlgili alanın gösterilip gösterilmeme seçeneği. Alan gizlenmek istenirse false değeri verilir. Normalde alan bu kısıma yazılmazsa zaten gösterilmez. Fakat alanı getirip göstermek istenmiyorsa bu özellik kullanılır. Özellikle commands özelliğindeki AddLink, UpdateLink ve DeleteLink gibi linklere parametre yollanırken parametre mecbur getirilen alanlardan olmalı. Bu alanların gösterilmesi istenmezsebu özellik kullanılabilir.
                <br />
<b>ActiveText:</b> İlgili alan bool tipinde ise ve true değerine sahip ise gösterilecek resim yada text yazılır.
                <br />
<b>PassiveText:</b> İlgili alan bool tipinde ise ve false değerine sahip ise gösterilecek resim yada text yazılır. },
                <br />
Username: { <b>Title:</b> "Kullanıcı Adı", <b>Width:</b> "120px" },
                <br />
Active: { <b>Title:</b> "Aktif", <b>Width:</b> "80px" }
                <br />
<br />
<b>commands:</b> Tablodaki komutların (Detay, Ekle, Düzenle ve Sil) linklerini, textlerini ve gösterilip gösterilmeyeceğini düzenleyebileceğimiz özellikler belirtilir. Boş kalırsa varsayılan değerlerini alır. Aşağıda bu özellikler ve açıklamaları mevcut;
                <br />
<b>DetailText:</b> Detay linkinde yazacak metin.
                <br />
<b>DetailLink:</b> Link bir route yada parametre olabilir. item-detail-{Kolon İsmi} veya detail.aspx?id={Kolon İsmi} şeklinde tanımlanabilir. Burada Kolon İsmi yazan köşeli parantezli kısma ID yazarsanız o kısma getirilen alanlardan ID alanını ekleyecektir veya köşeli parantezli ifadeyi belirtmezseniz direk yazan linki yazacaktır.
                <br />
<b>ShowDetailLink:</b> Detay linkinin gösterilip gösterilmeyeceği belirtilir. Varsayılanı true yani gösterdir.
                <br />
<b>AddText:</b> Ekle linkinde yazacak metin.
                <br />
<b>AddLink:</b> Link bir route yada parametre olabilir. item-add-{Kolon İsmi} veya add.aspx?id={Kolon İsmi} şeklinde tanımlanabilir. Burada Kolon İsmi yazan köşeli parantezli kısma ID yazarsanız o kısma getirilen alanlardan ID alanını ekleyecektir veya köşeli parantezli ifadeyi belirtmezseniz direk yazan linki yazacaktır.
                <br />
<b>ShowAddLink:</b> Ekle linkinin gösterilip gösterilmeyeceği belirtilir. Varsayılanı true yani gösterdir.
                <br />
<b>UpdateText:</b> Düzenle linkinde yazacak metin.
                <br />
<b>UpdateLink:</b> Link bir route yada parametre olabilir. item-update-{Kolon İsmi} veya update.aspx?id={Kolon İsmi} şeklinde tanımlanabilir. Burada Kolon İsmi yazan köşeli parantezli kısma ID yazarsanız o kısma getirilen alanlardan ID alanını ekleyecektir veya köşeli parantezli ifadeyi belirtmezseniz direk yazan linki yazacaktır.
                <br />
<b>ShowUpdateLink:</b> Düzenle linkinin gösterilip gösterilmeyeceği belirtilir. Varsayılanı true yani gösterdir.
           
                <br />
<b>DeleteText:</b> Sil linkinde yazacak metin.
                <br />
<b>DeleteLink:</b> Link bir route yada parametre olabilir. item-delete-{Kolon İsmi} veya delete.aspx?id={Kolon İsmi} şeklinde tanımlanabilir. Burada Kolon İsmi yazan köşeli parantezli kısma ID yazarsanız o kısma getirilen alanlardan ID alanını ekleyecektir veya köşeli parantezli ifadeyi belirtmezseniz direk yazan linki yazacaktır.
                <br />
<b>ShowDeleteLink:</b> Sil linkinin gösterilip gösterilmeyeceği belirtilir. Varsayılanı true yani gösterdir.